import json
from datetime import datetime
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory
import redis

# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect.zip'
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("./dbiot-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
cassandra_session = cluster.connect()
cassandra_session.row_factory = dict_factory # Returning dict from Cassandra
cassandra_session.set_keyspace('k') # Change to your keyspace

redis_conn = redis.Redis(
    host='redis-13603.c98.us-east-1-4.ec2.redns.redis-cloud.com',
    port=13603,
    username="default",
    password="heSdUaN6yAKdMVkbVIVRG1pt5MqtBFJW",
    decode_responses=True
)

# ------------------- !! Attention !! -------------------
redis_conn.flushall() #Clear Redis database 
# -------------------------------------------------------

def create_tables(cassandra_session):
    cassandra_session.execute("""
    CREATE TABLE IF NOT EXISTS usuarios (
        id int,
        estado text,
        cidade text,
        endereco text,
        nome text,
        email text,
        interesses list<text>,
        PRIMARY KEY ((estado, cidade), id)
    )
    """)

    cassandra_session.execute("""
    CREATE TABLE IF NOT EXISTS produtos (
        id int,
        categoria text,
        nome text,
        custo int,
        preco int,
        quantidade int,
        PRIMARY KEY ((categoria), id)
    )
    """)

    cassandra_session.execute("""
    CREATE TABLE IF NOT EXISTS vendas (
        id int,
        dia int,
        mes int,
        ano int,
        hora text,
        valor int,
        produtos list<frozen<map<int, int>>>,
        usuario map<text, text>,
        PRIMARY KEY ((dia, mes, ano), hora, id)
    )
    """)

create_tables(cassandra_session)

def insert_usuarios(cassandra_session, users):
    for user in users:
        cassandra_session.execute("""
        INSERT INTO usuarios (id, estado, cidade, endereco, nome, email, interesses)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (user["id"], user["estado"], user["cidade"], user["endereco"], user["nome"], user["email"], user["interesses"]))

def insert_produtos(cassandra_session, products):
    for product in products:
        cassandra_session.execute("""
        INSERT INTO produtos (id, categoria, nome, custo, preco, quantidade)
        VALUES (%s, %s, %s, %s, %s, %s)
        """, (product["id"], product["categoria"], product["nome"], int(product["custo"] * 100), int(product["preco"] * 100), product["quantidade"]))

# Questão 1
def questao_1_a(cassandra_session):
    result = cassandra_session.execute("SELECT COUNT(*) FROM usuarios")
    return result.one()["count"]

def questao_1_b(cassandra_session):
    result = cassandra_session.execute("SELECT SUM(custo * quantidade) AS total_cost FROM produtos")
    total_cost_cents = result.one()["total_cost"]
    total_cost = total_cost_cents / 100.0
    return total_cost

# Teste para a questão 1
def test_questao_1():
    users = [
        {"id":1, "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua A, 45", "nome":"Serafim Amarantes", "email":"samarantes@g.com", "interesses": ["futebol", "pagode", "engraçado", "cerveja", "estética"]},
        {"id":2, "estado": "São Paulo", "cidade": "São Bento do Sapucaí", "endereco": "Rua B, 67", "nome":"Tamara Borges", "email":"tam_borges@g.com", "interesses": ["estética", "jiujitsu", "luta", "academia", "maquiagem"]},
        {"id":3, "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua C, 84", "nome":"Ubiratã Carvalho", "email":"bira@g.com", "interesses": ["tecnologia", "hardware", "games", "culinária", "servers"]},
        {"id":4, "estado": "Minas Gerais", "cidade": "Pouso Alegre", "endereco": "Rua D, 21", "nome":"Valéria Damasco", "email":"valeria_damasco@g.com", "interesses": ["neurociências", "comportamento", "skinner", "laboratório", "pesquisa"]}
    ]
    insert_usuarios(cassandra_session, users)
    
    products = [
        {"id":1, "categoria": "escritório", "nome":"Cadeira HM conforto", "custo": 2000.00, "preco": 3500.00, "quantidade": 120},
        {"id":2, "categoria": "culinária", "nome":"Tábua de corte Hawk", "custo": 360.00, "preco": 559.90, "quantidade": 40},
        {"id":3, "categoria": "tecnologia", "nome":"Notebook X", "custo": 3000.00, "preco": 4160.99, "quantidade": 76},
        {"id":4, "categoria": "games", "nome":"Headset W", "custo": 265.45, "preco": 422.80, "quantidade": 88},
        {"id":5, "categoria": "tecnologia", "nome":"Smartphone X", "custo": 2000.00, "preco": 3500.00, "quantidade": 120},
        {"id":6, "categoria": "games", "nome":"Gamepad Y", "custo": 256.00, "preco": 519.99, "quantidade": 40},
        {"id":7, "categoria": "estética", "nome":"Base Ismusquim", "custo": 50.00, "preco": 120.39, "quantidade": 76},
        {"id":8, "categoria": "cerveja", "nome":"Gutten Bier IPA 600ml", "custo": 65.45, "preco": 122.80, "quantidade": 88}
    ]
    insert_produtos(cassandra_session, products)

    assert questao_1_a(cassandra_session) == len(users)
    
    expected_total_cost = sum(p["custo"] * p["quantidade"] for p in products)
    assert questao_1_b(cassandra_session) == expected_total_cost / 100.0

test_questao_1()

# Questão 2
def questao_2(cassandra_session, redis_conn, state):
    users = cassandra_session.execute("SELECT * FROM usuarios WHERE estado=%s", (state,))
    for user in users:
        user_id = user["id"]
        redis_conn.hset(f"user:{user_id}", mapping={
            "estado": user["estado"],
            "cidade": user["cidade"],
            "endereco": user["endereco"],
            "nome": user["nome"],
            "email": user["email"],
            "interesses": json.dumps(user["interesses"])
        })
    
    return [redis_conn.hgetall(f"user:{user['id']}") for user in users]

def test_questao_2():
    state = "Minas Gerais"
    users = [
        {"id":'1', "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua A, 45", "nome":"Serafim Amarantes", "email":"samarantes@g.com", "interesses": ["futebol", "pagode", "engraçado", "cerveja", "estética"]},
        {"id":'3', "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua C, 84", "nome":"Ubiratã Carvalho", "email":"bira@g.com", "interesses": ["tecnologia", "hardware", "games", "culinária", "servers"]},
        {"id":'4', "estado": "Minas Gerais", "cidade": "Pouso Alegre", "endereco": "Rua D, 21", "nome":"Valéria Damasco", "email":"valeria_damasco@g.com", "interesses": ["neurociências", "comportamento", "skinner", "laboratório", "pesquisa"]}
    ]
    result = questao_2(cassandra_session, redis_conn, state)
    for user, res in zip(users, result):
        assert res["estado"] == user["estado"]
        assert res["cidade"] == user["cidade"]
        assert res["endereco"] == user["endereco"]
        assert res["nome"] == user["nome"]
        assert res["email"] == user["email"]
        assert json.loads(res["interesses"]) == user["interesses"]

test_questao_2()

# Questão 3
def questao_3_a(cassandra_session, redis_conn, user_id):
    user = redis_conn.hgetall(f"user:{user_id}")
    return user

def questao_3_b(cassandra_session, redis_conn, product_id):
    product = cassandra_session.execute("SELECT * FROM produtos WHERE id=%s", (product_id,)).one()
    redis_conn.set(f"product:{product_id}", json.dumps(product))
    return product

def test_questao_3():
    user_id = '1'
    expected_user = {
        "estado": "Minas Gerais",
        "cidade": "Santa Rita do Sapucaí",
        "endereco": "Rua A, 45",
        "nome": "Serafim Amarantes",
        "email": "samarantes@g.com",
        "interesses": json.dumps(["futebol", "pagode", "engraçado", "cerveja", "estética"])
    }
    user = questao_3_a(cassandra_session, redis_conn, user_id)
    assert user == expected_user

    product_id = 1
    expected_product = {
        "id": 1,
        "categoria": "escritório",
        "nome": "Cadeira HM conforto",
        "custo": 200000,
        "preco": 350000,
        "quantidade": 120
    }
    product = questao_3_b(cassandra_session, redis_conn, product_id)
    assert product == expected_product

test_questao_3()