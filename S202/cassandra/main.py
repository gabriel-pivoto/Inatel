import json
from datetime import datetime
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory
import redis


# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
cloud_config = {
    'secure_connect_bundle': 'secure-connect-dbiot.zip'
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("./dbiot-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
cassandra_session = cluster.connect()
cassandra_session.row_factory = dict_factory
cassandra_session.set_keyspace('ksiot')

redis_conn = redis.Redis(
    host='redis-13603.c98.us-east-1-4.ec2.redns.redis-cloud.com',
    port=13603,
    username="default",
    password="heSdUaN6yAKdMVkbVIVRG1pt5MqtBFJW",
    decode_responses=True
)

# ------------------- !! Attention !! -------------------
redis_conn.flushall()  # Clear Redis database
# -------------------------------------------------------


def create_tables(cassandra_session):
    cassandra_session.execute("""
    CREATE TABLE IF NOT EXISTS usuarios (
        id int,
        estado text,
        cidade text,
        endereco text,
        nome text,
        email text,
        interesses list<text>,
        PRIMARY KEY ((estado, cidade), id)
    )
    """)

    cassandra_session.execute("""
    CREATE TABLE IF NOT EXISTS produtos (
        id int,
        categoria text,
        nome text,
        custo int,
        preco int,
        quantidade int,
        PRIMARY KEY ((categoria), id)
    )
    """)

    cassandra_session.execute("""
    CREATE TABLE IF NOT EXISTS vendas (
        id int,
        dia int,
        mes int,
        ano int,
        hora text,
        valor int,
        produtos list<frozen<map<int, int>>>,
        usuario map<text, text>,
        PRIMARY KEY ((dia, mes, ano), hora, id)
    )
    """)


create_tables(cassandra_session)


def insert_usuarios(cassandra_session, users):
    for user in users:
        cassandra_session.execute("""
        INSERT INTO usuarios (id, estado, cidade, endereco, nome, email, interesses)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (user["id"], user["estado"], user["cidade"], user["endereco"], user["nome"], user["email"], user["interesses"]))


def insert_produtos(cassandra_session, products):
    for product in products:
        cassandra_session.execute("""
        INSERT INTO produtos (id, categoria, nome, custo, preco, quantidade)
        VALUES (%s, %s, %s, %s, %s, %s)
        """, (product["id"], product["categoria"], product["nome"], int(product["custo"] * 100), int(product["preco"] * 100), product["quantidade"]))


# Questão 1
def questao_1_a(session):
    result = session.execute("SELECT COUNT(*) FROM usuarios")
    return result.one()["count"]


def test_questao_1_a():
    users = [
        {"id": 1, "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua A, 45", "nome": "Serafim Amarantes", "email": "samarantes@g.com", "interesses": ["futebol", "pagode", "engraçado", "cerveja", "estética"]},
        {"id": 2, "estado": "São Paulo", "cidade": "São Bento do Sapucaí", "endereco": "Rua B, 67", "nome": "Tamara Borges", "email": "tam_borges@g.com", "interesses": ["estética", "jiujitsu", "luta", "academia", "maquiagem"]},
        {"id": 3, "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua C, 84", "nome": "Ubiratã Carvalho", "email": "bira@g.com", "interesses": ["tecnologia", "hardware", "games", "culinária", "servers"]},
        {"id": 4, "estado": "Minas Gerais", "cidade": "Pouso Alegre", "endereco": "Rua D, 21", "nome": "Valéria Damasco", "email": "valeria_damasco@g.com", "interesses": ["neurociências", "comportamento", "skinner", "laboratório", "pesquisa"]}
    ]

    insert_usuarios(cassandra_session, users)
    assert len(users) == questao_1_a(cassandra_session)


def questao_1_b(session):
    result = session.execute("SELECT SUM(custo * quantidade) AS total_cost FROM produtos")
    total_cost_cents = result.one()["total_cost"]
    total_cost = total_cost_cents / 100.0
    return total_cost


def test_questao_1_b():
    products = [
        {"id": 1, "categoria": "escritório", "nome": "Cadeira HM conforto", "custo": 2000.00, "preco": 3500.00, "quantidade": 120},
        {"id": 2, "categoria": "culinária", "nome": "Tábua de corte Hawk", "custo": 360.00, "preco": 559.90, "quantidade": 40},
        {"id": 3, "categoria": "tecnologia", "nome": "Notebook X", "custo": 3000.00, "preco": 4160.99, "quantidade": 76},
        {"id": 4, "categoria": "games", "nome": "Headset W", "custo": 265.45, "preco": 422.80, "quantidade": 88},
        {"id": 5, "categoria": "tecnologia", "nome": "Smartphone X", "custo": 2000.00, "preco": 3500.00, "quantidade": 120},
        {"id": 6, "categoria": "games", "nome": "Gamepad Y", "custo": 256.00, "preco": 519.99, "quantidade": 40},
        {"id": 7, "categoria": "estética", "nome": "Base Ismusquim", "custo": 50.00, "preco": 120.39, "quantidade": 76},
        {"id": 8, "categoria": "cerveja", "nome": "Gutten Bier IPA 600ml", "custo": 65.45, "preco": 122.80, "quantidade": 88}
    ]

    insert_produtos(cassandra_session, products)
    total_cost = 765559.20

    assert total_cost == questao_1_b(cassandra_session)


def questao_2(cassandra_session, redis_conn, state):
    rows = cassandra_session.execute("SELECT * FROM usuarios WHERE estado=%s", (state,))
    users = []
    for row in rows:
        user_data = {
            "id": str(row["id"]),
            "estado": row["estado"],
            "cidade": row["cidade"],
            "endereco": row["endereco"],
            "nome": row["nome"],
            "email": row["email"],
            "interesses": row["interesses"]
        }
        redis_conn.hset(f"user:{row['id']}", mapping=user_data)
        users.append(user_data)
    return users


def test_questao_2():
    state = "Minas Gerais"

    users = [
        {"id": '1', "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua A, 45", "nome": "Serafim Amarantes", "email": "samarantes@g.com", "interesses": ["futebol", "pagode", "engraçado", "cerveja", "estética"]},
        {"id": '3', "estado": "Minas Gerais", "cidade": "Santa Rita do Sapucaí", "endereco": "Rua C, 84", "nome": "Ubiratã Carvalho", "email": "bira@g.com", "interesses": ["tecnologia", "hardware", "games", "culinária", "servers"]},
        {"id": '4', "estado": "Minas Gerais", "cidade": "Pouso Alegre", "endereco": "Rua D, 21", "nome": "Valéria Damasco", "email": "valeria_damasco@g.com", "interesses": ["neurociências", "comportamento", "skinner", "laboratório", "pesquisa"]}
    ]

    results = questao_2(cassandra_session, redis_conn, state)

    assert len(users) == len(results)

    for user in users:
        redis_user = redis_conn.hgetall(f"user:{user['id']}")
        assert user["estado"] == redis_user["estado"]
        assert user["cidade"] == redis_user["cidade"]
        assert user["endereco"] == redis_user["endereco"]
        assert user["nome"] == redis_user["nome"]
        assert user["email"] == redis_user["email"]
        assert ','.join(user["interesses"]) == redis_user["interesses"]


if __name__ == '__main__':
    test_questao_1_a()
    test_questao_1_b()
    test_questao_2()

    print("All tests passed!")
